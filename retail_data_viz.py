# -*- coding: utf-8 -*-
"""Copy of DataVizAssignment1_part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1prUjIn2OGnobEQKKiCcl_jJtF1LIhlSw
"""

import pandas as pd
import matplotlib.pyplot as plt

root_input_file_path = './data/'
root_output_file_path = './output/csvs/'
root_output_image_path = './output/images/'

# input
raw_data_file_path=root_input_file_path + 'Online_Retail_full_copy.csv'
# output
# csv files
df_cleaned_UK_file_path=root_output_file_path+'df_cleaned_UK.csv'
product_analysis_file_path =  root_output_file_path + 'product_analysis.csv'
high_value_customers_sales_file_path = root_output_file_path + 'high_value_customer_sales.csv'
product_analysis_high_value_customer_file_path = root_output_file_path + 'product_analysis_high_value_customer.csv'
stockcode_quantity_description_table_file_path = root_output_file_path + 'stockcode_quantity_description_table.csv'
# Vizualisation files
Total_Revenue_and_Quantity_by_Average_Selling_Price_Category_file_path = root_output_image_path + 'Total_Revenue_and_Quantity_by_Average_Selling_Price_Category.png'
Top_5_Products_by_Revenue_file_path = root_output_image_path + 'Top_5_Products_by_Revenue.png'
Top_5_Selling_Products_by_Quantity_file_path = root_output_image_path + 'Top_5_Selling_Products_by_Quantity.png'
Monthly_Quantity_Sold_Trend_per_Price_Category_file_path = root_output_image_path + 'Monthly_Quantity_Sold_Trend_per_Price_Category.png'
Monthly_Revenue_Trend_per_Price_Category_file_path = root_output_image_path + 'Monthly_Revenue_Trend_per_Price_Category.png'
Revenue_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers_file_path = root_output_image_path + 'Revenue_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers.png'
Total_Quantity_Sold_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers_file_path = root_output_image_path + 'Total_Quantity_Sold_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers.png'
Comparison_Top_5_Selling_Products_by_Quantity_sold_across_Customer_Segment_file_path = root_output_image_path + 'Comparison_Top_5_Selling_Products_by_Quantity_sold_across_Customer_Segment.png'
Comparison_Top_5_Products_by_Revenue_they_generate_across_Customer_Segment_file_path = root_output_image_path + 'Comparison_Top_5_Products_by_Revenue_they_generate_across_Customer_Segment.png'
Pie_Revenue_Contribution_High_Value_vs_Other_Customers_file_path = root_output_image_path + 'Pie_Revenue_Contribution_High_Value_vs_Other_Customers.png'

#colors
revenue_color_1='#BDE2B9'
revenue_color_2='#dec13e'
quantity_color_1='#66B2FF'
quantity_color_2='#ffa600'

# Adding low_memory=False to avoid mixed types warning
raw_data=pd.read_csv(raw_data_file_path, low_memory=False)

print("Performing Data Cleaning")
# Clean and Filter
df_cleaned_UK=raw_data[(raw_data['UnitPrice']!=0) & (raw_data['Country']=='United Kingdom')& (raw_data['Quantity']>0)].copy()
# Update the 'CustomerID' using .loc[] to avoid SettingWithCopyWarning

df_cleaned_UK = df_cleaned_UK.dropna(subset=['CustomerID'])



# Step 4: Create a new 'Revenue' column (Quantity * UnitPrice) without triggering the warning
df_cleaned_UK['Revenue'] = df_cleaned_UK['Quantity'] * df_cleaned_UK['UnitPrice']


# Step 5: Group by product and create 2 new coulmns total revenue and total quantity which will have total quantity sold and revenue per stock code
product_analysis=df_cleaned_UK.groupby(['StockCode']).agg(
    total_revenue=pd.NamedAgg(column='Revenue', aggfunc='sum'),
    total_quantity_sold=pd.NamedAgg(column='Quantity', aggfunc='sum')
    ).reset_index()


# Step 6: calculate average selling price per product
product_analysis['Average Selling Price']=product_analysis['total_revenue']/product_analysis['total_quantity_sold']


# Step 7: Categorise products into high, medium, and low revenue based on quantiles
product_analysis['revenue_generated_category'] = pd.qcut(product_analysis['total_revenue'], 3, labels=['Low Revenue', 'Medium Revenue','High Revenue'])
# Step 8: Categorise products into high, medium, and low quantity sold

product_analysis['quantity_sold_category'] = pd.qcut(product_analysis['total_quantity_sold'], 3,labels=['Low Qunatity', 'Medium Quantity', 'High Quantity'])
# product_analysis.head(10)

#Step 9: Divide Average Selling Price into 5 categories
product_analysis['average_selling_price_category']=pd.qcut(product_analysis['Average Selling Price'], 5, labels=['Very Low 0-20% Range', 'Low 20-40% Range', 'Medium 40-60% Range', 'High 60-80% Range', 'Very High 80-100% Range'])



#Step 10: Identify High Value Customers
# High-value customers: Top 20% by total revenue


high_value_customers_table = df_cleaned_UK.groupby(['CustomerID']).agg(total_spent=pd.NamedAgg(column='Revenue', aggfunc='sum'))

high_value_threshold = high_value_customers_table['total_spent'].quantile(0.8)
high_value_customer=high_value_customers_table[high_value_customers_table['total_spent']>=high_value_threshold]

# print(high_value_customer)

#from the df_cleaned_UK table take out all the sales data of high value customers.
high_value_customer_sales=df_cleaned_UK[df_cleaned_UK['CustomerID'].isin(high_value_customer.index)]
# high_value_customer_sales table only consist of transaction details of high value customer, all low value customers are excluded in this table

high_value_customer_sales.to_csv(high_value_customers_sales_file_path, index=False)

# Step-11 creating a product analysis table for high value customer segment which consist of total revenue and total quantity generated by high value customers for each product
product_analysis_high_value_customer=high_value_customer_sales.groupby(['StockCode']).agg(
    revenue_from_high_value_customers = pd.NamedAgg(column='Revenue', aggfunc='sum'),
    quantitysold_to_high_value_customer = pd.NamedAgg(column='Quantity', aggfunc='sum')
).reset_index()

product_analysis_high_value_customer.to_csv(product_analysis_high_value_customer_file_path, index=False)


# Merge with the main product analysis for comparison
product_analysis = product_analysis.merge(product_analysis_high_value_customer, on=['StockCode'], how='left')

#There will be some products which are not purchased by highvalue customers in product analysis table, so for them below 2 coulmns will be empty, adding 0 to that
product_analysis[['revenue_from_high_value_customers', 'quantitysold_to_high_value_customer']] = (
    product_analysis[['revenue_from_high_value_customers', 'quantitysold_to_high_value_customer']].fillna(0)
)
df_cleaned_UK.to_csv(df_cleaned_UK_file_path, index=False)
product_analysis.to_csv(product_analysis_file_path, index=False)

## Overview: Sales Distribution Across Product Categories

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as mticker

def format_func(value, tick_number):
    return f'{int(value):,}'  # Formats the number with commas for thousands

# Group the data by 'average_selling_price_category' and calculate both total revenue and total quantity sold
product_analysis_grouped = product_analysis.groupby('average_selling_price_category', observed=False).agg(
    total_revenue=('total_revenue', 'sum'),
    total_quantity_sold=('total_quantity_sold', 'sum')
).reset_index()

# Sort the data by total revenue for consistency
product_analysis_grouped = product_analysis_grouped.sort_values(by='total_revenue', ascending=False)

# Define bar width and positions
bar_width = 0.35  # The width of the bars
r1 = np.arange(len(product_analysis_grouped))  # The position of the first set of bars (total revenue)
r2 = [x + bar_width for x in r1]  # The position of the second set of bars (total quantity sold)

# Create the grouped bar chart
plt.figure(figsize=(19, 8))

# Plot bars for total revenue
bars1 = plt.bar(r1, product_analysis_grouped['total_revenue'], color=revenue_color_1, width=bar_width, label='Total Revenue')

# Plot bars for total quantity sold
bars2 = plt.bar(r2, product_analysis_grouped['total_quantity_sold'], color=quantity_color_1, width=bar_width, label='Total Quantity Sold')

# Add labels/bar values for total revenue
for bar in bars1:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (bar.get_height() * 0.01),
             f'{int(bar.get_height()):,}', ha='center', va='bottom', fontsize=12)

# Add labels/bar values for total quantity sold
for bar in bars2:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (bar.get_height() * 0.01),
             f'{int(bar.get_height()):,}', ha='center', va='bottom', fontsize=12)

# Adding labels and title
plt.xlabel('Average Selling Price Category', fontsize=14)
plt.ylabel('Total Values', fontsize=14)
plt.title('Total Revenue and Total Quantity Sold by Average Selling Price Category', fontsize=18)

# Adding ticks on the x-axis
plt.xticks([r + bar_width/2 for r in range(len(product_analysis_grouped))], product_analysis_grouped['average_selling_price_category'])

# Adding grid lines for readability
# plt.grid(True, axis='y', linestyle='--', color='lightgray', alpha=0.5, zorder=0)

# Apply custom formatter to avoid scientific notation
plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(format_func))

# Add a legend
plt.legend()

# Tight layout to prevent overlap
plt.tight_layout()

# Save the plot to an png file
plt.savefig(Total_Revenue_and_Quantity_by_Average_Selling_Price_Category_file_path, format='png')

# Show the plot
plt.show()

## 2. Search: Identify Top-Selling Products

# Step 1: Group by 'StockCode' to find total quantity sold and total revenue
stockcode_metrics_df = df_cleaned_UK.groupby('StockCode').agg(
    total_quantity=('Quantity', 'sum'),
    total_revenue=('Revenue', 'sum')
).reset_index()

# Step 2: Add 'Description' column for better readability in plots
stockcode_metrics_description_df = stockcode_metrics_df.merge(
    df_cleaned_UK[['StockCode', 'Description']], on='StockCode', how='left'
).drop_duplicates(subset='StockCode', keep='first')

# Step 3: Sort by total quantity and total revenue
sorted_by_quantity = stockcode_metrics_description_df.sort_values(by='total_quantity', ascending=False)

sorted_by_revenue = stockcode_metrics_description_df.sort_values(by='total_revenue', ascending=False)

# Step 4: Get top 5 most sold and top 5 by revenue
most_sold_5 = sorted_by_quantity.head(5)
top_5_revenue = sorted_by_revenue.head(5)


# Step 4: Get top 5 least sold and least 5 by revenue
top5_underperforming = stockcode_metrics_description_df.sort_values(by=['total_quantity','total_revenue']   , ascending=[True, True])

print("Top 5 Underperforming Products")
print(top5_underperforming.head(5))

print("Plot: Top 5 most sold products")
# Plot 1: Top 5 most sold products
plt.figure(figsize=(19, 8))

bars = plt.barh(most_sold_5['Description'], most_sold_5['total_quantity'], height=0.5, color=quantity_color_1, zorder=2)

plt.gca().invert_yaxis()
plt.grid(True, axis='x', linestyle='--', color='lightgray', alpha=0.5, zorder=0)

# Set x-axis padding on the right
plt.xlim(0, max(most_sold_5['total_quantity']) * 1.1)

# Add labels/bar values
for bar in bars:
    plt.text(bar.get_width() + (bar.get_width() * 0.01), bar.get_y() + bar.get_height()/2,
             f'{bar.get_width():,.0f}', va='center')

# Add plot title, x-axis and y-axis labels
plt.ylabel('Product Description', fontsize=14)
plt.xlabel('Total Quantity Sold', fontsize=14)
plt.title('Top 5 Selling Products by Quantity', fontsize=18)

# Display the plot
plt.tight_layout()
plt.savefig(Top_5_Selling_Products_by_Quantity_file_path, format='png')
plt.show()

print("Plot: Top 5 products by revenue")
plt.figure(figsize=(19, 8))

bars_revenue = plt.barh(top_5_revenue['Description'], top_5_revenue['total_revenue'], height=0.5, color=revenue_color_1, zorder=2)

plt.gca().invert_yaxis()
plt.grid(True, axis='x', linestyle='--', color='lightgray', alpha=0.5, zorder=0)

# Set x-axis padding on the right
plt.xlim(0, max(top_5_revenue['total_revenue']) * 1.1)

# Add labels/bar values for revenue plot
for bar in bars_revenue:
    plt.text(bar.get_width() + (bar.get_width() * 0.01), bar.get_y() + bar.get_height()/2,
             f'{bar.get_width():,.2f}', va='center')

# Add plot title, x-axis and y-axis labels
plt.ylabel('Product Description', fontsize=14)
plt.xlabel('Total Revenue', fontsize=14)
plt.title('Top 5 Products by Revenue', fontsize=18)

# Display the plot
plt.tight_layout()
# Save the plot to an png file
plt.savefig(Top_5_Products_by_Revenue_file_path, format='png')
plt.show()

## 3. Trends: Analyze Sales per Average Selling Price Product Category Over Time

# Convert InvoiceDate to datetime if not done already
df_cleaned_UK['InvoiceDate'] = pd.to_datetime(df_cleaned_UK['InvoiceDate'])

# Merge product_analysis with df_cleaned_UK to include average_selling_price_category
merged_sales = df_cleaned_UK.merge(product_analysis[['StockCode', 'average_selling_price_category']], on='StockCode', how='left')

# Add a column for month from InvoiceDate
merged_sales['Month'] = merged_sales['InvoiceDate'].dt.to_period('M')

# Group by Month and average_selling_price_category, calculate sum of revenue and quantity
monthly_sales_category = merged_sales.groupby(['Month', 'average_selling_price_category'], observed=False).agg(
    total_revenue=('Revenue', 'sum'),
    total_quantity=('Quantity', 'sum')
).reset_index()

# Pivot the data for plotting (Revenue)
monthly_sales_pivot_revenue = monthly_sales_category.pivot(index='Month', columns='average_selling_price_category', values='total_revenue')

# Plot monthly revenue trend per average_selling_price_category
plt.figure(figsize=(19, 8))
for category in monthly_sales_pivot_revenue.columns:
    plt.plot(monthly_sales_pivot_revenue.index.astype(str), monthly_sales_pivot_revenue[category], marker='o', label=category)
plt.title('Monthly Revenue Trend per Price Category')
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.legend(title='Price Category')
plt.grid(True)
plt.tight_layout()
plt.savefig(Monthly_Revenue_Trend_per_Price_Category_file_path, format='png')
plt.show()

# Pivot the data for plotting (Quantity Sold)
monthly_sales_pivot_quantity = monthly_sales_category.pivot(index='Month', columns='average_selling_price_category', values='total_quantity')

# Plot monthly quantity sold trend per average_selling_price_category
plt.figure(figsize=(19, 8))
for category in monthly_sales_pivot_quantity.columns:
    plt.plot(monthly_sales_pivot_quantity.index.astype(str), monthly_sales_pivot_quantity[category], marker='o', label=category)
plt.title('Monthly Quantity Sold Trend per Price Category')
plt.xlabel('Month')
plt.ylabel('Total Quantity Sold')
plt.xticks(rotation=45)
plt.legend(title='Price Category')
plt.grid(True)
plt.tight_layout()
plt.savefig(Monthly_Quantity_Sold_Trend_per_Price_Category_file_path, format='png')
plt.show()

## 4. Comparison: Customer Segmentation (High-Value vs Other Customers)

# Group by price category and calculate revenue from high-value and other customers
category_revenue = product_analysis.groupby('average_selling_price_category', observed=False).agg(
    total_revenue_from_high_value_customers=('revenue_from_high_value_customers', 'sum'),
    total_revenue=('total_revenue', 'sum')
).reset_index()


def format_func(value, tick_number):
    return f'{int(value):,}'  # Formats the number with commas for thousands

# Calculate the revenue from other customers
category_revenue['total_revenue_from_other_customers'] = category_revenue['total_revenue'] - category_revenue['total_revenue_from_high_value_customers']

# Stacked bar plot
plt.figure(figsize=(19, 8))
bars1 = plt.barh(category_revenue['average_selling_price_category'], category_revenue['total_revenue_from_high_value_customers'], label='High-Value Customers', color=revenue_color_1)
bars2 = plt.barh(category_revenue['average_selling_price_category'], category_revenue['total_revenue_from_other_customers'], left=category_revenue['total_revenue_from_high_value_customers'], label='Other Customers', color=revenue_color_2)

# Show bar values
for bar in bars1:
    plt.text(bar.get_width()/2, bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

for bar in bars2:
    plt.text(bar.get_width()/2 + bar.get_x(), bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

plt.title('Revenue by Average Selling Price Product Category: High-Value vs Other Customers')
plt.xlabel('Total Revenue', fontsize=14)
plt.ylabel('Average Selling Price Product Category', fontsize=14)
# Apply the custom formatter to the x-axis to avoid scientific notation
plt.gca().xaxis.set_major_formatter(mticker.FuncFormatter(format_func))
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(Revenue_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers_file_path, format='png')
plt.show()


# Group by price category and calculate revenue from high-value and other customers
category_quantity_sold = product_analysis.groupby('average_selling_price_category', observed=False).agg(
    total_quantity_sold_to_high_value_customers=('quantitysold_to_high_value_customer', 'sum'),
    total_quantity_sold=('total_quantity_sold', 'sum')
).reset_index()

# Calculate the revenue from other customers
category_quantity_sold['total_quantity_sold_from_other_customers'] = category_quantity_sold['total_quantity_sold'] - category_quantity_sold['total_quantity_sold_to_high_value_customers']

# Stacked bar plot
plt.figure(figsize=(19, 8))
bars1 = plt.barh(category_quantity_sold['average_selling_price_category'], category_quantity_sold['total_quantity_sold_to_high_value_customers'], label='High-Value Customers', color=quantity_color_1)
bars2 = plt.barh(category_quantity_sold['average_selling_price_category'], category_quantity_sold['total_quantity_sold_from_other_customers'], left=category_quantity_sold['total_quantity_sold_to_high_value_customers'], label='Other Customers', color=quantity_color_2)

# Show bar values
for bar in bars1:
    plt.text(bar.get_width()/2, bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

for bar in bars2:
    plt.text(bar.get_width()/2 + bar.get_x(), bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)
plt.title('Total Quantity Sold by Average Selling Price Product Category: High-Value vs Other Customers')
plt.xlabel('Quantity Sold', fontsize=14)
plt.ylabel('Average Selling Price Product Category', fontsize=14)

# Apply the custom formatter to the x-axis to avoid scientific notation
plt.gca().xaxis.set_major_formatter(mticker.FuncFormatter(format_func))
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(Total_Quantity_Sold_by_Average_Selling_Price_Product_Category_High_Value_vs_Other_Customers_file_path, format='png')
plt.show()

## 5. Comparison: Top 5 Products by Revenue Generated and Customer Segementation (High-Value vs Other Customers)

# Step 1: Add 'Description' column for better readability in plots
product_analysis_description_df = product_analysis.merge(
    df_cleaned_UK[['StockCode', 'Description']], on='StockCode', how='left'
).drop_duplicates(subset='StockCode', keep='first')

# Step 2: Sort by total quantity and total revenue
sorted_by_quantity = product_analysis_description_df.sort_values(by='total_quantity_sold', ascending=False)

sorted_by_revenue = product_analysis_description_df.sort_values(by='total_revenue', ascending=False)

# Step 3: Get top 5 most sold and top 5 by revenue
most_sold_5 = sorted_by_quantity.head(5)

top_5_revenue = sorted_by_revenue.head(5)

# Plot 1: Top 5 most sold products
plt.figure(figsize=(19, 8))

bars1 = plt.barh(most_sold_5['Description'], most_sold_5['quantitysold_to_high_value_customer'], label = 'Quantity sold to High Value Customers',color=quantity_color_1)
bars2 = plt.barh(most_sold_5['Description'], most_sold_5['total_quantity_sold']-most_sold_5['quantitysold_to_high_value_customer'], label='Quantity Sold to Other Customers', left=most_sold_5['quantitysold_to_high_value_customer'], color=quantity_color_2)
plt.gca().invert_yaxis()
# plt.grid(True, axis='x', linestyle='--', color='lightgray', alpha=0.5, zorder=0)

# Set x-axis padding on the right
plt.xlim(0, max(most_sold_5['total_quantity_sold']) * 1.1)

# Show bar values
for bar in bars1:
    plt.text(bar.get_width()/2, bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

for bar in bars2:
    plt.text(bar.get_width()/2 + bar.get_x(), bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

# Add plot title, x-axis and y-axis labels
plt.ylabel('Product Description', fontsize=14)
plt.xlabel('Total Quantity Sold', fontsize=14)
plt.title('Comparison: Top 5 Selling Products by Quantity sold across Customer Segment', fontsize=18)
plt.legend()

# Display the plot
plt.tight_layout()
plt.savefig(Comparison_Top_5_Selling_Products_by_Quantity_sold_across_Customer_Segment_file_path, format='png')
plt.show()


# Plot 2: Top 5 revenue products
plt.figure(figsize=(19, 8))

bars1 = plt.barh(top_5_revenue['Description'], top_5_revenue['revenue_from_high_value_customers'], label = 'Revenue from to High Value Customers', color=revenue_color_1)
bars2 = plt.barh(top_5_revenue['Description'], top_5_revenue['total_revenue']-top_5_revenue['revenue_from_high_value_customers'], label='Revenue from Other Customers', left=top_5_revenue['revenue_from_high_value_customers'], color=revenue_color_2)
plt.gca().invert_yaxis()
# plt.grid(True, axis='x', linestyle='--', color='lightgray', alpha=0.5, zorder=0)

# Set x-axis padding on the right
plt.xlim(0, max(top_5_revenue['total_revenue']) * 1.1)

# Show bar values
for bar in bars1:
    plt.text(bar.get_width()/2, bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

for bar in bars2:
    plt.text(bar.get_width()/2 + bar.get_x(), bar.get_y() + bar.get_height()/2, f'{int(bar.get_width()):,}', va='center', ha='left', fontsize=12)

# Add plot title, x-axis and y-axis labels
plt.ylabel('Product Description', fontsize=14)
plt.xlabel('Total Revenue', fontsize=14)
plt.title('Comparison: Top 5 Products by Revenue they generate across Customer Segment', fontsize=18)

plt.gca().xaxis.set_major_formatter(mticker.FuncFormatter(format_func))
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(Comparison_Top_5_Products_by_Revenue_they_generate_across_Customer_Segment_file_path, format='png')
plt.show()

## 6. Contribution of high-value customers vs. other customers


customer_segment_revenue = [
    product_analysis['revenue_from_high_value_customers'].sum(),
    product_analysis['total_revenue'].sum() - product_analysis['revenue_from_high_value_customers'].sum()
]
labels = ['High-Value Customers', 'Other Customers']

# Plot pie chart
plt.figure(figsize=(8, 8))
plt.pie(customer_segment_revenue, labels=labels, autopct='%1.1f%%', startangle=90, colors=[revenue_color_1, revenue_color_2])
plt.title('Revenue Contribution: High-Value vs Other Customers')
plt.savefig(Pie_Revenue_Contribution_High_Value_vs_Other_Customers_file_path, format='png')
plt.show()